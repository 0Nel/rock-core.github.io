---
title: The Robot Construction Kit (rock)
routed_title: The Robot Construction Kit
---

<div markdown="1" class="content2-container">
<div markdown="1" class="content2-container-3col-left">
Get it
{: .content-title-noshade-size3}

Get started with the [step-by-step installation guide](startup/index.html).
Reference documentation on [the build system](autoproj/index.html) is also
available, and you can browse the code and contribute on
[Gitorious](http://gitorious.com/rock).
</div>

<div markdown="1" class="content2-container-3col-middle">
Use it
{: .content-title-noshade-size3}

The toolchain offers a support [from the component
development](orogen/index.html) to [running complete
systems](runtime/index.html). Logging, log replay and data analysis [is also a
very important part](data_analysis/index.html)
Finally, have a look at the [existing packages](/package_directory/index.html).

</div>

<div markdown="1" class="content2-container-3col-right">
Get help and contribute
{: .content-title-noshade-size3}
</div>
</div>

Overview
--------

_Click on a tool below to go directly to the documentation for it_

<div>
<object type="image/svg+xml" data="startup/tools_overview.svg" width="600" height="230">
Browser does not support SVG files!
</object>
</div>

What's the difference with the Orocos Toolchain ?
-------------------------------------------------
The Orocos Toolchain is the standard infrastructure required to build Orocos
components. It contains the real-time toolkit, typeGen/oroGen code generators
and supportive components for deployment and task browsing.

The Rock toolchain is centered around the use of oroGen for component
writing, and the Ruby language for system deployment and data analysis. In
practice, what you get is:

 * use Ruby scripts to start your components and monitor them
 * use a model-based tool for large-scale system deployment, and benefit from
   its logging capabilities to do post-mortem analysis of system behaviour.
 * use the data logger to log all data that your components generate, and use
   Ruby scripts to analyze this load of data. Replay the data into components
   for testing, or use the Rock UI to display it.
 * benefit from a large component repository

<div class="warning" markdown="1">
**Important for existing Orocos users** The development workflow in Rock does
not encourage the use of the Orocos deployer and of the RTT scripting language.
Since they are both expensive to build, they are by default disabled when you
build the Rock toolchain. However:

 * you can reenable OCL by removing the 'ocl' line in exclude_packages in autoproj/manifest
 * you can reenable the RTT scripting by changing PLUGINS_SCRIPTING_ENABLED from OFF
   to ON in autoproj/overrides.rb
</div>

