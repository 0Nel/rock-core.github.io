---
title: Installation
sort_info: 0
---

This page explains how to install the Orocos Toolchain and where to look for more
information (tutorials, ...)

Installation: the easy way
--------------------------

 1. Make sure that the Ruby interpreter is installed on your machine

    ruby --version
    {: .commandline}

    Important: Rock requires ruby either 1.8.7 or better, or 1.9.2 or better

 2. Create and "cd" into the directory in which you want to install the toolchain
 3. Save the [bootstrap.sh](http://gitorious.com/rock/buildconf-all/blobs/raw/master/bootstrap.sh) script in the folder you just created
 4. In a console, run
    
    sh bootstrap.sh
    {: .commandline}

 5. Important: as the build tool tells you, you **must** load the generated env.sh script at the end of the build !!!
    * source it in your current console

      . ./env.sh
      {: .commandline}

    * but also add it to your .bashrc: append the following line at the end of
      $HOME/.bashrc
    
      . /path/to/the/directory/env.sh
      {: .commandline}

 6. read [the autoproj quick start guide](/autoproj/quick_start.html) to get the
    basics of the build system

<div class="warning" markdown="1">
**Important for existing Orocos users** The development workflow in Rock does
not encourage the use of the Orocos deployer and of the RTT scripting language.
Since they are both expensive to build, they are by default disabled when you
build the Rock toolchain. However:

 * you can reenable OCL by removing the 'ocl' line in exclude_packages in autoproj/manifest
 * you can reenable the RTT scripting by changing PLUGINS_SCRIPTING_ENABLED from OFF
   to ON in autoproj/overrides.rb
</div>


Maintaining a Rock installation uptodate
----------------------------------

Once it is installed, you can update it by going into the root of the
installation folder and do

autoproj update <br/>
autoproj build
{: .commandline}

You might have to reload the env.sh script after that as well. Simply opening a
new console will do the trick

