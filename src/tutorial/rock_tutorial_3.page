---
title: Rock Tutorial 3
sort_info: 3
---
Tutorial Info
-----------

In this tutorial we will use an additional task to create motion commands from a input device, like a joystick( or a keyboard).


Implementation
-----------

We are using here an existing task of the rock-robotics framework, so we don't have to implement anything.


Run it
----------

The common way to start the Tutorial now would be to execute tutorials/orogen/rock_tutorial/scripts/rockTutorial3.rb.
For this part a joystick is needed.

{coderay:: ruby}
require 'orocos'
require 'readline'
include Orocos

## Initialize orocos ##
Orocos.initialize

## Execute the deployments 'rock_tutorial' and 'joystick_local' ##
Orocos.run 'rock_tutorial', 'joystick_local' do

## Get the specific task context ##
rockControl = TaskContext.get 'rock_tutorial_control'
rockVisualization = TaskContext.get 'rock_tutorial_visualization'
joystickLocal = TaskContext.get 'joystick_local'

## Connect the ports ##
joystickLocal.motion_command.connect_to rockControl.motion_command
rockControl.pose.connect_to rockVisualization.pose

## Set some properties ##
#joystickLocal.joystick_device = "/dev/input/js0"

## Configure the tasks ##
joystickLocal.configure

## Start the tasks ##
joystickLocal.start
rockControl.start
rockVisualization.start

Readline::readline('Press enter to exit')
end
{coderay}

This script is quite the same as the script from rock tutorial 2, but with some major improvements. As you can see
we execute a second deployment named 'joystick_local', which is part of the Robot Construction Kit. This Task can be 
found in drivers/orogen/controldev. In the .orogen file of this task, in this case 'controldev.orogen', you can find all information needed for the
following steps.
Now we fetch the new task context like we did it before for the other tasks. Then we connect the output port 'motion_command'
of the task 'joystickLocal' with the equal named input port of the task 'rockControl'. The task 'joystick_local' of course uses the 
joystick input to generate motion commands. In the next step we could set a property named 'joystick_device' of the task 'joystickLocal'. 
With that we can set a string which is the local device of the joystick on your machine. The standard parameter for this property is "/dev/input/js0" as you can see in the 'controldev.orogen' file. So you even don't need to set this parameter, but you can if your joystick is on a different device.
Next we run the configureHook method for the task 'joystickLocal' with the command 'joystickLocal.configure'. If a task needs to be configured
could be found in the .orogen file as well. Then there will be a flag 'needs_configuration' in the specific task_context part. (More about this
topic can be found [here](../orogen/task_states.html)) If you are not sure you can just call the method even when its unused.
At least we will start all the Tasks, which will call the startHook() in each task.

There are more properties defined in the 'controldev.orogen' file, so we can set more properties if we want to.
{coderay:: ruby}
joystickLocal.minSpeed = 0.1
joystickLocal.maxSpeed = 1.0
joystickLocal.maxRotationSpeed = 3.14159
{coderay}
