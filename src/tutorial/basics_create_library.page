---
title: Creating libraries
sort_info: 100
---

Abstract
--------------

This tutorial will give you some handson experience on:

 * how to create libraries in ROCK
 * how to embed them into the build system of ROCK

If you don't want to execute the following steps by yourself, the result can also be found in 'tutorials/basics_tutorial'.
For this tutorial it is assumed that your autoproj installation can be found in ~/dev.

Creating libraries
-----------
Before you start developing components, you will need to think about the functionality that is required for your component. This tutorial teaches you how to write a message producer and a message consumer component, which will pass timestamped messages inbetween each other. For the meesage producer and the consumer we will create a message library to provide message creation and message printing funcitionaltiy. This library will make use of the existing package base/types which simplifies creation of timestamps.

Now, that it is clear what functionality is needed you can start writing the library. 
Note, that ROCK strongly suggests to encapsulate your main functionality in libraries. Thus, your library code remains independent of the actual framework in use, and can be easily reused and maintained separately from any framework that wraps this functionality.

ROCK allows you to create a C++-library from an existing template - this template has been defined by ROCK maintainers and can be found in base/templates). Calling the command 'rock-create-lib' starts a command line dialog to create a library called 'basics_tutorial/message_driver'

{coderay:: sh}
~/dev$ rock-create-lib basics_tutorial/message_driver
{coderay}

Once called the create script a command line dialog is started, that will request basic information to configure the template for you:
{coderay:: sh}
Initialized empty Git repository 
in ~/dev/basics_tutorial/message_driver/.git/
Do you want to start the configuration of
the cmake project: message_driver
Proceed [y|n]
y
------------------------------------------
We require some information to update the manifest.xml
------------------------------------------
Brief package description (Press ENTER when finished):
A message_driver for the basic ROCK tutorial
Long description: 
This is a library that allows message production
and message handling for the the basic ROCK tutorial
Author: 
New user
Author email: 
new-user@rock-robotics.org
Url (optional):

Enter your dependencies as a comma separated list.
Press ENTER when finished:
base/types
Initialized empty shared Git repository 
in ~/dev/basics_tutorial/message_driver/.git/
[master (root-commit) 37aa552] Initial commit
8 files changed, 108 insertions(+), 0 deletions(-)
create mode 100644 CMakeLists.txt
create mode 100644 INSTALL
create mode 100644 LICENSE
create mode 100644 README
create mode 100644 manifest.xml
create mode 100644 src/CMakeLists.txt
create mode 100644 src/Dummy.cpp
create mode 100644 src/Dummy.hpp
create mode 100644 src/Main.cpp
create mode 100644 src/dummyproject.pc.in
Done.
{coderay}

The newly created package comes in a ready to run fashion which means that you can build and install it right away using the build tools autoproj.
{coderay:: sh}
amake basics_tutorial/message_driver
{coderay}
or 
{coderay:: sh}
autoproj build basics_tutorial/message_driver
{coderay}

### Adding the required functionality
Yet, the library does not contain message handling capabilities. So, we create three new files, i.e. a header Messages.hpp will contain the message type that is used to transport message between components, and a header and source file for the MessageDriver. Put all file into the src/ folder of the newly created package.

***NOTE***: ROCK recommends to stick to the following coding styles and use a CamelCase naming C++ file: HeaderFile.hpp and SourceFile.cpp. However, due to historic reasons not all packages of ROCK conform to this style. 
{: .warning}

First, create the message type for timestamped messages. Since base/types already provides a timestamp, include 'base/time.h' and make 'base/types' a
dependency of your library, if you haven't done it already. Check the manifest.xml and make sure it contains a 'base/types' dependency. 
{coderay:: sh}
<depend package="base/types" />
{coderay}

The actual message implementation looks as follows:
{coderay:: c++}
#ifndef _MESSAGE_DRIVER_MESSAGE_HPP_
#define _MESSAGE_DRIVER_MESSAGE_HPP_

#include <string.h>
#include <base/time.h>

namespace message_driver
{
    struct Message
    {   
        // The message content 
        std::string content;

        // The timestamp when the message was created
        base::Time time;

	// Default Constructor -- required
        Message()
                : content()
                , time(base::Time::now())
        {   
        }   

        Message(const std::string& msg)
                : content(msg)
                , time(base::Time::now())
        {   
        }   
    };  

}
#endif // _MESSAGE_DRIVER_MESSAGE_HPP_
{coderay}

***NOTE***: There are some constraints on designing custom types, so that they can be used in an orogen component. Check the [general documentation](../orogen/task_interface.html) for details.
{: .warning}

The driver for creating and reading messages:
{coderay:: c++}
#ifndef _MESSAGE_DRIVER_HPP_
#define _MESSAGE_DRIVER_HPP_

#include <message_driver/Message.hpp>

namespace message_driver {

class MessageDriver
{

public: 
    /**
     * Create a timestamped message
     * \return A timestamped message
     */
    Message createMessage();
    
    /**
     * Print a message to stdout
     * \param msg Message to be printed
     */
    void printMessage(const Message& msg);
};

}

#endif // _MESSAGE_DRIVER_HPP_
{coderay}

Create a library that create a timestamped message:
{coderay:: c++}
#include "MessageDriver.hpp"
#include <iostream>

namespace message_driver
{

Message MessageDriver::createMessage()
{
        Message msg("Message from MessageDriver");
        return msg;
}

void MessageDriver::printMessage(const Message& msg)
{
        std::cout << "[" << msg.time.toString() 
                  << "] " << msg.content
                  << std::endl;
}

}
{coderay}


### Integration into the build system

Once you created a library in ROCK integrate it into the build system [autoproj](../autproj/index.html). The first step towards integration into the build system is adding the newly created files to the src/CMakeLists.txt file, since ROCK default C++ libraries use [CMake](http://www.cmake.org/cmake/help/documentation.html) for the build process. ROCK also comes with some CMake macros that facilitate setting up libraries, and resolving any required dependencies. 

{coderay:: sh}
rock_library(message_driver
    SOURCES MessageDriver.cpp
    HEADERS MessageDriver.hpp Message.hpp
    DEPS_PKGCONFIG base-types)

rock_executable(message_driver_bin Main.cpp
    DEPS message_driver)
{coderay}

After adapting the CMakeLists.txt add the package to the build configuration, so that eventually you can embedded the library into orogen components. The easiest way to adapt the build configuration is by adding the package to the manifest's layout section. Thus, edit ~/dev/autoproj/manifest and add the package to the layout section. Package management in detail is discussed in [Adding packages](../autoproj/adding_packages.html)

***NOTE***: When adding the package, make sure you use the same indentation as the previous line, here '- rock.toolchain'. The manifest file is parsed as .yaml, and thus relies on proper indentation.
{: .warning}

{coderay:: sh}
package_sets:
  - type: git 
     branch: $ROCK_FLAVOR
     url: $GITORIOUS_ROOT/rock-toolchain/package_set.git
     push_to: $GITORIOUS_PUSH_ROOT/rock-toolchain/package_set.git

# Layout. Note that the rock.base, rock.toolchain
# and orocos.toolchain sets are imported 
# by other rock sets.
layout:
   - rock.base
   - rock.toolchain
   - basics_tutorial/message_driver
{coderay}

### Build it
Just verify that your component builds an then progress to the [next tutorial](basics_task_creation.html).
{coderay:: sh}
amake basics_tutorial/message_driver
{coderay}


Summary
----------------------------
In this tutorial you have learned to: 

 * create a C++-library from the ROCK template
 * create a simple orogen component
 * embed new packages into the build system

In the next tutorial you will learn how to create an orogen component and embed you library into it.

