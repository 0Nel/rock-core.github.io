---
title: Logging And Replay
sort_info: 200
---

Abstract
-----------
In this tutorial you will learn how to log data produced by orogen tasks and how to replay them into 
the orocos framework.

Logging Data
-----------
By default all tasks come with a logger component that allows writing the data of the output ports to a file.

**Activating logging:** You can activate the logging by calling the ruby
method *log_all* from your ruby start script. If you only want to log the
ports or the roperties of the tasks you can also call the methods
*log_all_ports* or *log_all_configuration* instead.

{coderay:: ruby}
Orocos.run "message_producer::Task" => "message_producer",
			"message_consumer::Task" => "message_consumer" do 
    Orocos.log_all
    producer = Orocos::TaskContext.get "message_producer"
    consumer = Orocos::TaskContext.get "message_consumer"

    producer.messages.connect_to consumer.messages

    producer.configure
    producer.start
    consumer.start

    while true
        sleep 0.1
    end
end
{coderay}

All the logged data go by default to log files called *your_task_name.x.log* in
the current working directory. In this case all the logged data go to  
message_producer.0.log. There is also a file message_consumer.0.log which
holds no data since the task has no output port. The digit in the end
increases automatically.

The logs of the properties and of the changes to them are stored in a file
called *properties.x.log* in the current working directory.

rock-replay
-----------
Rock is shipped with a command line tool for displaying the content of log
files. Therefore, if you want to look into a log file without replaying it to
the framework you can call *rock-replay log_file.x.log* to get a graphical
overview of the logged data.  By double clicking on a port name Vizkit is
trying to find a widget plugin to display the data. If it cannot find one,
vizkit is using a generic struct viewer widget to display the content of the
sample. To display the log file recorded above call:  
  
*rock-replay message_producer.0.log*

oroconf
-------
The property logs (e.g. properties.0.log) allow to know for sure what was the
configuration of the task at each point during the execution. One can visualize
them also using rock-replay, or can also display as a YAML configuration file
using the oroconf tool.

For instance, to display the configuration as it was at 1333968549.2281 (you
usually obtain the time by copy/pasting it from a rock-replay window when
something notable happens), one would do:

{coderay:: text}
oroconf logextract properties.0.log message_producer 1333968549.2281
{coderay}

A common use-case is to display the configuration that aborted an experiment
(i.e. the last configuration). The @last keyword can be used in place of time to
do that:

{coderay:: text}
oroconf logextract properties.0.log message_producer @last
{coderay}

Finally, once can save the configuration in a file to use with runscripts later:

{coderay:: text}
oroconf logextract properties.0.log message_producer @last --save=file.yml
{coderay}

Summary
-----------
In this tutorial you learned how to activate logging and how to replay
the logged data to an orocos task. In the next tutorial you will learn 
how to display live and logged data with the help of Vizkit.

Progress to the [next tutorial](210_data_visualization.html).
