---
title: Using Avahi to find the tasks
sort_info: 530
--- 

Abstract
----------------
In this tutorial you will learn how to use the Avahi nameservice that is available with Rock.
This will allow you to distribute your components over multiple physical systems without having to rely on a centralized nameservice.
The goal of this tutorial is thus: 

 * distributing two components, i.e. message_producer and message_consumer will be started independently
 * connecting two components using the Avahi nameservice

More details on this topic you find in the [general documentation](../runtime/setup.html).

For this tutorial you will reuse the components that you created during the [basics tutorials](index.html#tutorials-outline).
You can also retrieve them directly by [installing the tutorial package set](index.html#installing)

***IMPORTANT***:
For this tutorial to work you need to have an +active+ network device, otherwise Avahi will not publish any information. 
{.warning}

Ruby scripts
----------------
Until now you might not have questioned how the Ruby scripts establish a connection in details to a task that runs in a deployment. 
Orocos.rb used CORBA as one of its transport layers, and it also uses the CORBA nameservice for finding components. 
For that reason, an orocos.rb script has an initialization section, i.e. the following statement are essential.

{coderay:: ruby}
require 'orocos'
include Orocos
Orocos.initialize
{coderay}

By default this initialization sets up the CORBA communication layer, and if no other statements are made, a CORBA nameserver is started on localhost with IP 127.0.0.1. 

You rely on this nameservice as soon as you call TaskContext.get. The call will query all available nameservices to find the task of the given name.

{coderay:: ruby}
Orocos.run 'message_producer_deployment' do 
    message_producer = TaskContext.get 'message_producer'
    ...
end
{coderay}

If the task cannot be found, an exception will be raised, e.g. if you misspelled the task name and used 'message_producr' instead of the correct name: 
{coderay:: text}
Orocos.rb: killing running task contexts and deployments
	 because of unhandled exception
Orocos.rb:   /home/rockuser/dev/tools/orocos.rb/
	lib/orocos/nameservice.rb:92:in `resolve': The 
	service message_producr could not be resolved 
        using following nameservices (in priority order):
	CORBA
{coderay}



The Avahi nameservice
-----------------------
The CORBA nameserver enforces a centralized setup, while Avahi nameservice does not. 
Now, you want to spread your system
across multiple machines since you want to avoid having to specify a central instance.

But before you can use the Avahi nameservice you have to make sure the tools/service_discovery package 
is installed, since the support for service_discovery is optional. 
Only when this package is installed orogen components will be generated with
suppport for service discovery via Avahi. 
The minimal Rock installation already provides this package for you, so you can continue right away.

After being sure service_discovery has been installed an you component has been build with service discovery support you enable the nameservice AVAHI in your Ruby script. 
You enable Avahi for a specific domain, where you can use a pattern of 'name'.'suffix', where the suffix must be either '._tcp' or '._udp'. Here, use '_robot._tcp'.

{rdoc_class: {base_url: /api/tools/orocos.rb, name:
Nameservice::enable}}
_before_ you call Orocos.initialize:

{coderay:: ruby}
require 'orocos'
include Orocos
Nameservice::enable(:AVAHI, :searchdomains => ['_robot._tcp'])
Orocos.initialize
{coderay}

The nameservice has to be enabled +before+ the call to initalize Orocos.

For the name resolution via Avahi to work, you have to start your deployment
within a service discovery domain, and since there exists a command line option 
on the deployment to set the service discovery domain (sd-domain), you just forward the command line option to the deployment. 
Be reminded, that this option is available to deployments +after+ the tools/service_discovery package has been installed and +after+ (re)building components with the available tools/service_discovery package.

{coderay:: ruby}
Orocos.run 'message_producer_deployment', :cmdline_args => 
	{ 'sd-domain' => '_robot._tcp' }, :wait => 3 do |p|
...
end
{coderay} 

Since the publishing of the service in the Avahi domain happens with delay once you start the deployment, you have to allow for a waiting time, before querying the nameservice for the name. 
By setting the wait option you can pass a time in second that the script should wait, until executing the block. Select 3 seconds 
until the actual block of the Ruby script starts to run. 

After enabling the message producer startup to use Avahi, also activate the Avahi nameserver for the message consumer.
The message producer will be started separately, thus remove the message_producer_deployment from the start.rb in the message consumer component.

{coderay:: ruby}
require 'orocos'
require 'readline'

include Orocos
Nameservice::enable(:AVAHI, :searchdomains => [ '_robot._tcp'])
Orocos.initialize

Orocos.run 'message_consumer_deployment', :cmdline_args => 
	{ 'sd-domain' => '_robot._tcp'}, :wait => 3 do  

     message_producer = TaskContext.get 'message_producer'
     message_consumer = TaskContext.get 'message_consumer'

     message_consumer.start

     message_producer.messages.connect_to message_consumer.messages

     Readline::readline("Press ENTER to exit\n") do
     end 
end
{coderay}

### Run it
First start the message producer, then the message consumer. The message consumer will output the message in 
the same way a before, however, this time both component found each other using the Avahi naming service. 
{coderay:: text}
ruby message_producer/scripts/start.rb &
ruby message_consumer/scripts/start.rb
{coderay}

***NOTE***: You need to have a proper configuration of Avahi, and there are some known issue with using IPv4. 
Enabling IPv6 for the daemon in /etc/avahi/avahi-daemon.conf will help to make service discovery more robust.
{: .warning}

{coderay:: text}
[server]
...
use-ipv6=yes
...

[publish]
publish-a-on-ipv6=yes
...
{coderay}


Summary
-----------
In this tutorial you have learned to:

 * enable the Avahi nameservice for finding running tasks
 * apply options to the Ruby script 
 * connect two components using the Avahi nameservice


