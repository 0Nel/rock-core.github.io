---
title: Installation
sort_info: 50
---

This page explains how to install Rock and where to look for more
information (tutorials, ...)

Installation: the easy way
--------------------------

 1. Make sure that the Ruby interpreter is installed on your machine

    ruby --version
    {: .commandline}

    Important: Rock requires ruby either 1.8.7 or higher, or 1.9.2 or higher

 2. Create and "cd" into the directory in which you want to install the toolchain
 3. To build the base system (base packages + toolchain, but no
    libraries/components), use this
    [bootstrap.sh](http://gitorious.com/rock/buildconf/blobs/raw/master/bootstrap.sh)
    script. Save it  in the folder you just created. For other options, see
    below.

    **There is an important note for long-term Orocos users.** See the red box
    below.

 4. In a console, run
    
    sh bootstrap.sh
    {: .commandline}

 5. Important: as the build tool tells you, you **must** load the generated env.sh script at the end of the build !!!
    * source it in your current console

      . ./env.sh
      {: .commandline}

    * but also add it to your .bashrc: append the following line at the end of
      $HOME/.bashrc
    
      . /path/to/the/directory/env.sh
      {: .commandline}

 6. read [the autoproj guide for basic usage](/documentation/autoproj/basic_usage.html) to know the
    basic operations of the build system. More bootstrapping documentation is
    also available [at the same place](/documentation/autoproj/bootstrap.html)

Other bootstrapping options
---------------------------

 * **to build all of Rock**, use [this bootstrap.sh](http://gitorious.com/rock/buildconf-all/blobs/raw/master/bootstrap.sh)
   instead of the one listed above
 * you can also bootstrap the base system and then cherry-pick the packages you want. Have a look in [the package
   directory](/package_directory/index.html), and add the package names to the
   layout section in autoproj/manifest. For instance,  if you want to
   get the [Xsens IMU component](http://rock-robotics.org/package_directory/packages/drivers_orogen_xsens_imu/index.html),
   the layout section should look like:

       layout:
          - rock.base
          - rock.toolchain
          - drivers/orogen/xsens_imu

<div class="warning" markdown="1">
**Important for existing Orocos users** The development workflow in Rock does
not encourage the use of the Orocos deployer and the RTT scripting language.
Since they are both expensive to build, they are by default disabled when you
build the Rock toolchain. However:

 * you can reenable OCL by removing the 'ocl' line in exclude_packages in autoproj/manifest
 * you can reenable the RTT scripting by changing PLUGINS_SCRIPTING_ENABLED from OFF
   to ON in autoproj/overrides.rb
</div>

Maintaining a Rock installation
----------------------------------

Once Rock is installed, you can update your installation by going into the root of the
installation folder and do

autoproj update <br/>
autoproj build
{: .commandline}

You might have to reload the env.sh script after that as well, to export updated environment variables into your current shell. Simply opening a new console will do the trick (given you have added sourcing env.sh to your .bashrc).

