---
title: System Management
sort_info: 0
only_on: master
---
Rock's system mamagement layer is a _model based layer_. I.e., instead of
writing down instructions on how to bind components together, as we did so far
using Ruby scripts, you _describe_ the system you want to run and let the
system management layer do the rest of the work. There are multiple benefits to
running systems this way. Among those:

 * having a system _monitoring_, i.e. the ability to detect and represent
   errors. No more silent errors.
 * extension of component networks: quite often, a system need _functional_
   components as well as _support_ components (think: diagnostic components,
   communication bus support, hardware triggering readers, ...). The model-based
   layer allows you to focus on the function and let the tooling automatically
   handle the support
 * online system adaptation: the ability to reconfigure the components or even
   the whole _network_ of components at runtime.
 * encoding of complex behaviour: building high-level "programs" that build upon
   the simpler components.
 * "think local, act global". Managing a network even as small as 15+ components
   is a challenge. Rock's system management layer allows you to think in small
   pieces, and let the tooling generate the complete network.

This series of tutorials will introduce you to Rock's advanced system management
tools. This tutorial builds upon the results of the previous tutorials, and in
particular [Writing a control component](../tutorials/500_writing_a_control_component.html) and
[Integrating a joystick](../tutorials/510_joystick.html), or that you at least installed
the tutorial results. See the bottom of [this page](../tutorials/index.html) for
instructions on how to do so.

The tutorial itself will use Rock's system management layer to perform the
same task than was previously done using a ruby script. Further tutorials will
then introduce some tooling that this layer offers, and go towards more complex
system examples.

