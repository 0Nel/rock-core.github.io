---
title: Configure components
sort_info: 120
---

Abstract 
---------------------------------

This tutorial will give you some handson experience on:
 
 * how to add configuration support for your component
 * how to embed configuration into the Ruby script

Components and underlying libraries often need to be configured before starting them. This tutorial will teach you
how to use orogen component's properties to map to your library configuration option, and how to add the functionality
to the orogen component. 

At the end of this tutorial, the component will look like:

![Component Interface](120_producer_config.png)
{: .align-center}

Configure a component 
---------------------------------
Some libraries will require configuration before you can use them, e.g. add a the following property to the MessageDriver library.
Therefore create a configuration object and extend the message_driver to allow for configuration. 

The configuration object: 
{coderay:: c++}
#ifndef _MESSAGE_DRIVER_CONFIG_HPP_
#define _MESSAGE_DRIVER_CONFIG_HPP_

namespace message_driver
{

/**
* This configuration struct is a simple example of what you
* can do in order to wrap multiple configuration properties
* into a single object
* 
* This way you can manage configuration properties by grouping
* them into struct, and you don't have to change the orogen 
* components interface when your configuration object changes
*/
struct Config
{
        bool uppercase;

        Config()
            : uppercase(false)
        {   
        }   

};

}
#endif // _MESSAGE_DRIVER_CONFIG_HPP_
{coderay}

Adapted message_driver's header and source files: 
{coderay:: c++}
	...

        /**
        * MessageDriver configuration
        */
        MessageDriver();

        /**
        * MessageDriver configuration
        * \param config Configuration object
        */
        MessageDriver(const Config& config);

	...
private:
        Config mConfig;

{coderay}

{coderay:: c++}
...
#include <algorithm>
...

Message MessageDriver::createMessage()
{
        Message msg("Message from MessageDriver");

        if(mConfig.uppercase)
            std::transform(msg.content.begin()
	    	 , msg.content.end()
	         , msg.content.begin()
	         , toupper);

        return msg;
}

...

MessageDriver::MessageDriver()
        : mConfig()
{

}

MessageDriver::MessageDriver(const Config& config)
        : mConfig(config)
{
}

...
{coderay}

### Update the build configuration 

{coderay:: sh}
rock_library(message_driver
    SOURCES MessageDriver.cpp
    HEADERS MessageDriver.hpp Message.hpp Config.hpp
    DEPS_PKGCONFIG base-types)
{coderay}


### Embed the configuration property into the orogen component

In order to embed the configuration property into the orogen component, 
first add a property of the configuration type as follows (see also [Task Interface](../orogen/task_interface.html). 
The new task should not be started without configuration, which can be set by adding the statement 'need_configuration' 
to the task_context specification.

{coderay:: ruby}
import_types_from "message_driver/Config.hpp"

task_context "producer_deployment"
  needs_configuration
    
  property "config", "message_driver/Config"

  ...
end
{coderay}

Edit the task/Task.hpp and add the configuration member and activate the configureHook and the cleanupHook: 
{coderay:: c++}
        // Configuration object for the task
        message_driver::Config mConfig;

	...

        bool configureHook();

        bool cleanupHook();
        
        ...
{coderay}

Also remove the allocation and deallocation from the constructor and deconstrutor, since it will be moved into the configureHook and the cleanupHook:
{coderay:: c++}
bool Task::configureHook()
{
    if (! TaskBase::configureHook())
        return false;

    message_driver::Config configuration = _config.get();
    mpMessageDriver = new message_driver::MessageDriver(configuration);

    return true;
}
{coderay}

{coderay:: c++}
bool Task::cleanupHook()
{
    delete mpMessageDriver;
}
{coderay}


### Build the task
Now, build the task (beware: it will fail!)
{coderay:: c++}
amake basics_tutorial/orogen/message_producer
{coderay}

Building the task will fails, since some of the constructors need to be adapted to account for the configuration requirement. However, orogen supports you with this tasks, since it always generates the latest task template *.hpp and *.cpp files into the templates folder. 
Thus copy the constructor from templates/task/Task.hpp and templates/task/Task.cpp to replace the current ones in tasks/Task.hpp and task.cpp. 

Finally your header and source file should contain the following constructors:
{coderay:: c++}
Task(std::string const& name = "message_producer::Task");
Task(std::string const& name, RTT::ExecutionEngine* engine);
{coderay}

{coderay:: c++}
Task::Task(std::string const& name)
    : TaskBase(name)
{
}

Task::Task(std::string const& name, RTT::ExecutionEngine* engine)
    : TaskBase(name, engine)
{
}
{coderay}

### Embeding configuration into the ruby script

{coderay:: ruby}
require 'orocos'

include Orocos
Orocos.initialize

Orocos.run 'message_producer_deployment' do  

    message_producer = TaskContext.get 'message_producer'

    # 'config' is the name of the property
    message_producer.config do |p|
        p.uppercase = true
    end

    # Call to configure is required for this component
    # since it has been generated with 'needs_configuration'
    message_producer.configure
    message_producer.start

    reader = message_producer.messages.reader

    while true
        if msg = reader.read_new
            puts "#{msg.time} #{msg.content}"
        end 

        sleep 0.5 
    end 
end
{coderay}

### Run it

Now you can run the script. 
{coderay:: c++}
ruby configure.rb
{coderay}

Again, you should see something similar to the following. You can switch
between uppercase and mixed case printing by using your newly defined configuration options. With the script above you should see something like the following:
{coderay:: sh}
Wed Aug 03 09:40:28 +0200 2011 MESSAGE FROM MESSAGEDRIVER
Wed Aug 03 09:40:29 +0200 2011 MESSAGE FROM MESSAGEDRIVER
{coderay}

You can also try running the start.rb script. You will see, however, that the component will fail to start. Since you specified 'needs_configuration' in the component specification, it cannot be started without being configured beforehand. 


Summary
----------------
In this tutorial you have learned to: 

 * how to embed configuration into an orogen component
 * how to use the templates/ subfolder of an orogen component
 * how to set configuration properties for your component in a ruby script

In the next tutorial you will learn how to create a data driven component and how to connect it
with an existing component.

Progress to the [next tutorial](130_basics_connect_components.html).

