---
title: Data Visualization
sort_info: 210
---

Abstract
-----------
In this tutorial you will learn how to display live and logged data with the help of Vizkit and how to 
write a custom gui to display the data of your orocos task.

To understand this tutorial you must have done the basic tutorials and the data
logging tutorial. Basic knowledge about Qt, Qt Designer and qtruby is also
neccessary.

This tutorial directly continues from the last tutorials, additionally you have
to have the rock packages gui/vizkit and gui/rock_widget_collection installed.

Displaying Data with Vizkit
-----------
Vizkit is a ruby framework build around qtruby to support the developer with functionality of displaying his
custom data in a convenient way. It is shipped with some Qt Widgets to display some basic types. 
But its real strength lies in the ability to be customized.

**Displaying Camera Samples** For some baes types like the camera frame Vizkit has a special display widget.
To create an instance of a widget specialised to display camera frames you can use the Vizkit ruby 
method *display* and a Orocos port which is producing camera frame as argument. In the case below the camera is 
substituted by a log file called "camera_sample.0.log" but you can use the same syntax for orocos tasks as well.

{coderay:: ruby}
require 'orocos'
require 'vizkit'

include Orocos
Orocos.initialize

log = Orocos::Log::Replay.open("camera_sample.0.log")

Vizkit.display log.camera.frame
Vizkit.control log
Vizkit.exec
{coderay}

For testing purposes a camera log file can be found HERE.

Designing a custom GUI 
-----------
Vizkit is able to load ui files creates with the QDesigner. In this case a small GUI is loaded those ui file is 
printed below. If you want to create your own ui file, use the *Qt
Designer*, e.g. by calling *designer* on the command line.

{coderay:: xml}
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>Form</class>
 <widget class="QWidget" name="Form">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>319</width>
    <height>89</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Message Display</string>
  </property>
  <widget class="QLabel" name="TimeLabel">
   <property name="geometry">
    <rect>
     <x>10</x>
     <y>10</y>
     <width>61</width>
     <height>16</height>
    </rect>
   </property>
   <property name="text">
    <string>Time:</string>
   </property>
  </widget>
  <widget class="QLabel" name="messageLabel">
   <property name="geometry">
    <rect>
     <x>10</x>
     <y>30</y>
     <width>61</width>
     <height>16</height>
    </rect>
   </property>
   <property name="text">
    <string>Message:</string>
   </property>
  </widget>
  <widget class="QLabel" name="Time">
   <property name="geometry">
    <rect>
     <x>70</x>
     <y>10</y>
     <width>241</width>
     <height>16</height>
    </rect>
   </property>
   <property name="text">
    <string>&lt;Content&gt;</string>
   </property>
  </widget>
  <widget class="QLabel" name="Message">
   <property name="geometry">
    <rect>
     <x>70</x>
     <y>30</y>
     <width>241</width>
     <height>16</height>
    </rect>
   </property>
   <property name="text">
    <string>&lt;Content&gt;</string>
   </property>
  </widget>
  <widget class="QPushButton" name="Button">
   <property name="geometry">
    <rect>
     <x>110</x>
     <y>60</y>
     <width>91</width>
     <height>24</height>
    </rect>
   </property>
   <property name="text">
    <string>Button</string>
   </property>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>
{coderay}

This ui basically creates a window with two dedicated labels for writing stuff
(named *Time* and *Message*) and a push button (named *Button*) to trigger
actions. Further on this file is referred to as *test_gui.ui*.

To load the ui file with Vizkit use the Vizkit ruby method *load*. After the ui file is loaded
you can access all embedded objects by their object name and their qt signal/slots. 

{coderay:: ruby}
require 'vizkit'
#load ui file
gui = Vizkit.load 'test_gui.ui'

#do something if someone is clicking on the 
#button names Button
gui.Button.connect(SIGNAL('clicked()')) do
    puts 'someone presses on the button'
    gui.Time.setText(Time::now.to_s)
end

#display something in the label named Time
gui.Time.setText(Time::now.to_s)
gui.Message.setText("Just a message!")

gui.show
Vizkit.exec
{coderay}

As you can see, this small script displays the current time and some standard
message. Each time the button is pressed, a text is displayed on the command
line and the time label is updated.

Connecting a custom GUI with an orocos task
-----------

Just running the ui is nice for testing purposes, but the more interesting part
is connecting it to a real orocos task.

Use the following script as a basic example for the interaction between a
vizkit-ui and an orocos task.

{coderay:: ruby}
require 'orocos'
require 'vizkit'

include Orocos
Orocos.initialize

gui = Vizkit.load 'test_gui.ui'

Orocos.run 'message_producer_deployment' do 
    producer = Orocos::TaskContext.get 'message_producer'
    producer.configure

    #change a property when the button is pressed
    gui.Button.connect(SIGNAL('clicked()')) do
        # First: stop and cleanup the producer task
        producer.stop
        producer.cleanup

        # change the configuration
        producer.config do |p|
            p.uppercase = !p.uppercase
        end

        # start the task again
        producer.configure
        producer.start
    end

    # start the task
    producer.start

    # connect the port of message producer to our ui
    producer.messages.connect_to do |data,_|
        gui.Time.setText data.time.to_s
        gui.Message.setText data.content
        data # never forget this!!!
    end

    # start vizkit
    gui.show
    Vizkit.exec
end
{coderay}

We do several things here which require some explanation:

 * As the action of the button we want to switch the configuration of the
   message producer. To do this we have to stop our current task and clean up
   the configuration. Then we change the config, configure the task again and
   start it. This scheme is neccessary since it is currently the only save way
   to change the configuration of a task. You will notice a slight pause in the
   time display when pressing the button, which results from this sequence.
 
 * We connect our two labels with the output port of the message producer. Here
   it is very important (as alread shown in the [previous
   tutorial](200_logging_and_replay.html)), that you return the data strucutre
   in the connect_to block. Otherwise the call won't work. For more information
   about that look at the documentation of ruby code blocks.

Connecting a custom GUI with log files
-----------
If you want to connect your GUI with a log file you can use use the same method
like for an orocos task. The following scripts connects test_gui.ui to a
component, which uses the log from the [previuos
tutorial](200_logging_and_replay.html). Since we only dislay data, the button is
not connected.

{coderay:: ruby}
require 'vizkit'

log = Orocos::Log::Replay.open('message_producer_deployment.0.log')
gui = Vizkit.load 'test_gui.ui'

# connect the port of message producer to our ui
log.message_producer.messages.connect_to do |data,_|
    gui.Time.setText data.time.to_s
    gui.Message.setText data.content
    data # never forget this!!!
end

gui.show
Vizkit.control log
Vizkit.exec
{coderay}

Summary
-----------
In this tutorial you learned how to write a simple GUI and how to
connect its object with log files and orocos tasks. 

Progress to the [next tutorial](500_writing_a_control_component.html).
