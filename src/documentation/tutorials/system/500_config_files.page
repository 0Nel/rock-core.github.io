---
title: Configuration files
sort_info: 500
---

Abstract
--------
From the bundle from [the last tutorial](400_development_workflow.html) we will
now introduce the usage of configuration files.

Presentation
------------
Configuration files are YAML files in which the properties are listed and some
values are assigned to them. For instance, when looking at the interface of the
random motion generator:

{coderay:: text}
[...er/bundles/tutorial]% rock-inspect --show-tasks tut_brownian                
==========================================================
Task name:  tut_brownian::Task
defined in tut_brownian
----------------------------------------------------------

  ------- tut_brownian::Task ------
  no documentation defined for this task context model
  subclass of RTT::TaskContext (the superclass elements are displayed below)
  Ports
    [out]cmd:/base/MotionCommand2D
    [out]state:/int32_t
  No dynamic ports
  Properties
    max_angular_speed:/double, default: 0.314159265358979
    max_speed:/double, default: 1.5
    min_speed:/double, default: 0.5
    straight_duration:/double, default: 5
    turn_duration:/double, default: 5
  No attributes
  No operations
{coderay}

We have 5 properties that configure our component. Let's use a non-default value for the max_speed.

First, let's use a tool to generate a file filled with default values:

mkdir -p config/orogen
oroconf extract tut_brownian::Task --save config/orogen/
{: .cmdline}

The YAML files in config/orogen/ must follow the modelname.yml template to be
picked up by the system. In this case, the generated file has automatically be
called tut_brownian::Task.yml
{: .warning}

Have a look at the freshly created config/orogen/tut_brownian::Task.yml, and
compare it to the values reported by rock-inspect

Start a controller with 'random' deployed by default

rock-roby run scripts/rockRoby3.rb random
{: .cmdline}

Have a look at the configuration values:

rock-display tut_brownian
{: .cmdline}

Let's now change the configuration values ...

Changing configuration values at runtime
----------------------------------------
Edit config/orogen/tut_brownian::Task.yml and change min_speed to 0.5.

Now, start a shell

rock-roby shell
{: .cmdline}

In the shell, do

orocos.reload_config
{: .cmdline}

Have a look at the rock-roby run output:

{coderay:: text}
17:51:19.515 (Robot) task brownian needs reconfiguration
{coderay}

the orocos.reload_config command reloads the configuration files, but does not
apply the changes to the running tasks. To do that, type:

orocos.redeploy
{: .cmdline}

{coderay:: text}
17:52:06.069 (Robot) not logging rock_tutorial::RockTutorialControl:state
Orocos: deployment rock_tutorial has no logger (rock_tutorial_Logger)
17:52:06.128 (Robot) interrupting Orocos::RobyPlugin::TutBrownian::Task:0x7f1407fa7dd8
17:52:06.178 (Robot) stopped Orocos::RobyPlugin::TutBrownian::Task:0x7f1407fa7dd8{conf => [default], orocos_name => brownian}[]
17:52:06.215 (Robot) reconfiguring Orocos::RobyPlugin::TutBrownian::Task:0x7f1407ecffa0{conf => [default], orocos_name => brownian}[]: the task is marked as needing reconfiguration
17:52:06.215 (Robot) setting up Orocos::RobyPlugin::TutBrownian::Task:0x7f1407ecffa0{conf => [default], orocos_name => brownian}[]
17:52:06.215 (Robot) applied configuration [default] to brownian
17:52:06.217 (Robot) starting Orocos::RobyPlugin::TutBrownian::Task:0x7f1407ecffa0{conf => [default], orocos_name => brownian}[] (brownian)
{coderay}

The task got reconfigured, the properties changed, the configuration applied and the whole random composition restarted.

Defining multiple configurations
--------------------------------
In the configuration files, one can define multiple configuration blocks by giving them
names. Let's add two new configurations. Change config/orogen/tut_brownian::Task.yml to
look like:

{coderay:: yaml}
 --- name:default
 # no documentation available for this property
 max_angular_speed: 0.314159265358979
 # no documentation available for this property
 max_speed: 1.5
 # no documentation available for this property
 min_speed: 0.5
 # no documentation available for this property
 straight_duration: 5.0
 # no documentation available for this property
 turn_duration: 5.0
 --- name:slow
 max_speed: 0.5
 min_speed: 0
 --- name:fast
 max_speed: 4
 min_speed: 2
{coderay}

The general concept here is that, by default, the 'default' configuration is applied.
Configuration overlays can then be selected, where the parameters defined by some sections
are overriden by other. For instance, the 'default,slow' configuration contains all values
from default except for max_speed and min_speed that are set to the values in the 'slow'
configuration.

When defining a deployable task or adding it, a configuration is selected with

{coderay:: ruby}
define('random', Cmp::RockControl).use(TutBrownian::Task.use_conf('default', 'slow'))
{coderay}

One can also define configurations on compositions. Composition configurations _forward_
configurations to children. For instance, the following declaration announces that
Cmp::RockControl has a 'slow' configuration, in which the 'cmd' child (the
Srv::CommandGenerator) should be configured with 'default,slow'. The configuration of
the RockTutorialControl task is left open.

{coderay:: ruby}
composition 'RockControl' do
  # Any command generator
  add Srv::CommandGenerator, :as => "cmd"
  # And one rock
  add RockTutorial::RockTutorialControl, :as => "rock"
  # Create any unique possible connection. If ambiguities
  # exist, an error is generated
  autoconnect

  conf 'slow', 'cmd' => ['default', 'slow']
end
{coderay}

__Advanced__ The configurations are part of the deployment constraints. This means, in
practice that if two deployments request a task to be deployed with two different
configurations, the deployment will fail.
{: .note}

There is, for now, no ways to select configurations from the shell.

Summary
-------
In this tutorial you learned:

 * how to generate configuration files
 * how they are used by the system management layer (in particular, how the "default"
   section is picked up automatically)
 * how to modify them at runtime, and apply the result to whatever is currently running

