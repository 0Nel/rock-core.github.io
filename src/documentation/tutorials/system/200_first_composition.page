---
title: First composition
sort_info: 200
flavors: master
---

Abstract
------------
In this tutorial, you will learn how to write a simple model-based application,
and the most important tools that exist to run / debug it.

Note that this tutorial does require a (physical) joystick. The virtual joystick
won't work. However, if you don't have one, you can do everything in this
tutorial except running the generated component network. Moreover, the follow-up
tutorials will not need the joystick anymore, so if you don't have one we
suggest that you go through this tutorial anyway (just reading the running part)
and go on with the followup tutorials.
{: .warning}

A first model-based script
------------
The root concept in our system management layer is the _composition_. A
composition is a group of component that, once bound together, do something
useful. In our case, it would be moving the rock with a joystick. Create a new
scripts/rockRoby1.rb file and add the following code:

{coderay:: ruby}
# Make the needed oroGen projects available
using_task_library 'controldev'
using_task_library 'rock_tutorial'

# Tell the system which deployments to use
use_deployment 'rock_tutorial'
use_deployment 'joystick'

# Declare our composition
composition 'RockControl' do
    # With one joystick. Note that the oroGen project names are
    # converted from snake_case to CamelCase (controldev => Controldev,
    # rock_tutorial => RockTutorial). This is done consistently in the
    # system management layer
    add Controldev::JoystickTask, :as => "joystick"
    # And one rock
    add RockTutorial::RockTutorialControl, :as => "rock"
    # Create any unique possible connection. If ambiguities
    # exist, an error is generated
    autoconnect
end

# Finally, ask the system to run such a composition
add Cmp::RockControl
{coderay}

Checking the script and running the network
-------------------
As this __defines__ a composition, it is possible to visualize it without
running anything. Just do

{coderay:: sh}
rock-roby instanciate scripts/rockRoby1.rb
{coderay}

You should see a graphical representation of the system that would be executed
by this script, looking like:

TODO: add instanciate output

If you're happy with it, you can then run it with:

{coderay:: sh}
rock-roby run scripts/rockRoby1.rb
{coderay}

In another shell, run the display script

{coderay:: sh}
ruby scripts/display
{coderay}

<div class="note">
__Note for advanced users__: instead of always having to type "ruby
path/to/script", one can add the following so-called she-bang line to the top of
the script:

{coderay:: text}
#! /usr/bin/env ruby
{coderay}

You can then set the script's executable flag with

{coderay:: text}
chmod +x path/to/script
{coderay}

and do

{coderay:: text}
path/to/script
{coderay}
</div>

and move your joystick

Stopping the script
-------------------
The script can be stopped using CTRL+C. It shows a progression of the shutdown
procedure:

{coderay:: text}
18:33:13.182 (Roby) control quitting. Waiting for 6 tasks to finish (6 tasks still in plan)
18:33:13.183 (Roby)   Orocos::RobyPlugin::Logger::Logger:0x7f9eba6d36d8{conf => [default], orocos_name => joystick_Logger}[]
18:33:13.183 (Roby)   Orocos::RobyPlugin::Controldev::JoystickTask:0x7f9eba73d088{conf => [default], orocos_name => joystick}[]
18:33:13.183 (Roby)   Orocos::RobyPlugin::Deployments::Joystick:0x7f9eba7488e8{log => true, on => localhost}[]
18:33:13.183 (Roby)   Orocos::RobyPlugin::RockTutorial::RockTutorialControl:0x7f9eba75c168{conf => [default], orocos_name => rock_tutorial_control}[]
18:33:13.184 (Roby)   Orocos::RobyPlugin::Deployments::RockTutorial:0x7f9eba7687b0{log => true, on => localhost}[]
18:33:13.185 (Roby)   Orocos::RobyPlugin::Compositions::RockControl:0x7f9eba7cfde8{conf => [default]}[]
18:33:13.188 (Robot) interrupting Orocos::RobyPlugin::Logger::Logger:0x7f9eba6d36d8
18:33:13.193 (Robot) interrupting Orocos::RobyPlugin::Controldev::JoystickTask:0x7f9eba73d088
18:33:13.194 (Robot) interrupting Orocos::RobyPlugin::RockTutorial::RockTutorialControl:0x7f9eba75c168
18:33:13.282 (Roby) waiting for 5 tasks to finish (5 tasks still in plan)
18:33:13.283 (Roby)   Orocos::RobyPlugin::Logger::Logger:0x7f9eba6d36d8{conf => [default], orocos_name => joystick_Logger}[]
18:33:13.283 (Roby)   Orocos::RobyPlugin::Controldev::JoystickTask:0x7f9eba73d088{conf => [default], orocos_name => joystick}[]
18:33:13.283 (Roby)   Orocos::RobyPlugin::Deployments::Joystick:0x7f9eba7488e8{log => true, on => localhost}[]
18:33:13.283 (Roby)   Orocos::RobyPlugin::RockTutorial::RockTutorialControl:0x7f9eba75c168{conf => [default], orocos_name => rock_tutorial_control}[]
18:33:13.284 (Roby)   Orocos::RobyPlugin::Deployments::RockTutorial:0x7f9eba7687b0{log => true, on => localhost}[]
18:33:13.286 (Robot) stopped Orocos::RobyPlugin::Logger::Logger:0x7f9eba6d36d8{conf => [default], orocos_name => joystick_Logger}[]
18:33:13.288 (Robot) stopped Orocos::RobyPlugin::Controldev::JoystickTask:0x7f9eba73d088{conf => [default], orocos_name => joystick}[]
18:33:13.290 (Robot) stopped Orocos::RobyPlugin::RockTutorial::RockTutorialControl:0x7f9eba75c168{conf => [default], orocos_name => rock_tutorial_control}[]
18:33:13.518 (Roby) waiting for 2 tasks to finish (2 tasks still in plan)
18:33:13.518 (Roby)   Orocos::RobyPlugin::Deployments::Joystick:0x7f9eba7488e8{log => true, on => localhost}[]
18:33:13.518 (Roby)   Orocos::RobyPlugin::Deployments::RockTutorial:0x7f9eba7687b0{log => true, on => localhost}[]
{coderay}

What happened ?
---------------
Let's now have a look at what happened ... But graphically.

TODO: video

The same display can be used at runtime, started with

rock-roby display
{: .cmdline}

Summary
-------
This tutorial showed you:
 
  * how to setup a model-based script (using_task_library and using_deployment)
  * how to define a composition
  * how to run the resulting script
  * how to graphically represent the result

The following tutorial will go a bit further, introducing the concept of _data
service_, which allows you to add a bit more of abstraction in your system.
