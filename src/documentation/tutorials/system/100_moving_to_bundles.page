---
title: Moving to bundles
sort_info: 100
flavors: master
---

Abstract
--------

The following three tutorials will implement the same "rock controlled by a joystick" than
[previous tutorials](../510_joystick.html), but using the model-based approach.

First of all, we'll introduce the concept of bundles.

In Rock, bundles offer a "functional" view to the available functionality. I.e.,
instead of viewing only single components, bundles gather the scripts,
configuration files and tools neede to run (sub)systems.

In practice, bundles are Rock packages that contain a set of "things":

 * ruby scripts (to run sets of components)
 * models (including, but not limited to, for the system management layer)
 * configuration files
 * data converter and data analysis scripts
 * datasets needed to run the system (as e.g. location information, maps, ...)
 * ...

TODO: reference page on bundles

In this tutorial, we will create a new bundle and start developing in it.

It is assumed that your autoproj installation can be found in ~/dev.

Create the bundle
-----------------

Create a new directory bundles/tutorial from the root of the rock
installation by going in bundles/ and doing

{coderay:: text}
cd ~/dev/bundles
rock-create-bundle tutorial
{coderay}

Create a display script
----------------------------
Unlike with normal Ruby scripts, one cannot run Vizkit from within the system
management layer. We therefore need to prepare a separated script that will
display the rock position.

In the bundle, edit scripts/display and add:

{coderay:: ruby}
require 'orocos'
require 'vizkit'
include Orocos
## Initialize orocos
Orocos.initialize
## Create a widget for 3d display and show it
view3d = Vizkit.vizkit3d_widget
view3d.show

## load and add a 3d plugin for the rock
vizkit_rock = view3d.createPlugin('rock_tutorial', 'RockVisualization')

Vizkit.connect_port_to 'rock_tutorial_control', 'pose_samples',
    :auto_reconnect => true, :pull => false,
    :update_frequency => 33 do |sample, name|

    ## Finally, pass every pose sample to our visualizer plugin
    vizkit_rock.updatePose(sample)
    sample
end 
Vizkit.exec
{coderay}

Logs in bundles
---------------
When working with bundles, the component output, data logs and system management
logs are always saved in the logs/ folder, using a subfolder which matches the
time at which the process that generated the logs _started_ (for example:
20111025-1105 for 25/10/2011 11:05). The directory containing the latest logs
(or the logs that are curently being generated) are symlinked from logs/current.

Move on to the next tutorial
------------
We're setup, let's now dive into [building a model-based
application](200_first_composition.html)

