---
title: The Transformer at Runtime
sort_info: 230
---

This page is going to describe the runtime configuration interface of the
components that use the transformer oroGen plugin. It will then describe runtime
support for the transformer __in the context of Ruby scripting__, and data
display. The integration in the system management layer will come in the next
pages.

Component Interface
-------------------
Components that use the transformer oroGen plugin get the following
interface elements:

 * normal stream aligner properties. Each aligned port has a _port_name_\_period
   property that allows to set its period. The transformer has a
   transformer_max_latency property that allows to override the default set in
   the transformer declaration block
 * a static_transforms property that allows to set the transformations that are
   known and do not change at startup, and
 * a dynamic_transforms port that allows to send changing transformations to the
   transformer. The data must be sent using the
   [base/samples/RigidBodyState]({rock_type: base/samples/RigidBodyState}) type.
   Since the source and target frames are stored in the data structure, all
   streams that are 
 * finally, for each declared frame, a _frame_name_frame property that allows to
   set the actual frame name for the component's internal frame.

If, for any reasons, one wants to read dynamic transformations from a port
separate from dynamic_transforms, it is made possible by manually feeding the
data to the transformer C++ object. This __must__ be done before the call to
TaskBase::updateHook

{coderay:: c++}
base::samples::RigidBodyState rbs;
while(_my_transform_input.read(rbs, false) == RTT::NewData)
    _transformer.pushDynamicTransform(rbs);
{coderay}

Transformation Specifications
-----------------------------
The transformation specification file is a Ruby file that lists the known static
and dynamic transformations in a system. It is usually stored in a
config/transforms.rb file.

Static transformations are declared with

{coderay:: ruby}
static_transform "source_frame_name", "target_frame_name",
    translation, rotation
{coderay}

Translation and rotations are resp. specified with Eigen::Vector3d and
Eigen::Quaternion. The very useful Eigen::Quaternion.from_axis(angle, axis) call
is often used in these files. The translation or rotation can be omitted if they
are identities.

Dynamic transformations are declared with

{coderay:: ruby}
dynamic_transform "source_frame_name", "target_frame_name",
    "producer_task_name.port_name"
{coderay}

Where _producer_task_name_ and _port_name_ refer to the data stream that defines
the required transformation. If the task has only one RigidBodyState output
port, the port name can be left empty.

See [this file]({rock_source:
rock-tests/orogen/transformer/test/runtime_tests/config/transforms.rb}) for a
complete example.

Ruby scripting
--------------
When using the components in Ruby scripts, some automatic configuration can be
achieved.

Three bits are needed to configure the system properly:

1. the transformation declaration file (see above)
2. declarations that tell in which frame the data produced by the tasks is
   expressed in
3. proper configuration of the _frame_name_name properties on the components.

First of all, in addition to the transformation description file, you will have
to declare in which frames the data on your ports are expressed. This is done in
ruby scripting by setting Port#frame:

{coderay:: ruby}
Orocos.run ... do
  task = Orocos::TaskContext.get 'lidar'
  task.lidar_samples.frame = 'laser'

  ...
end
{coderay}


