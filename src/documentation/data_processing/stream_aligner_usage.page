---
title: Using the Stream Aligner
sort_info: 110
---

Orogen plug-in
-----------

To make life easier while using the stream aligner, a orogen plug-in was created.

To use the plug-in one needs to add the following lines to his project.orogen file:

{coderay:: ruby}
stream_aligner do
  max_latency(0.1)
  data1_period = 0.01
  align_port("data1_port_name", data1_period)
  align_port("data2_port_name", 0.3)
  align_port("data3_port_name", 0.1)
end
{coderay}

stream_aligner
: The stream_aligner statement will add a instance of the stream aligner to the task base class. 

max_latency(timout)
: The max_latency statement sets the timeout of the stream aligner. 

align_port(name, period)
: The align_port statement is more complex and will do multiple things at once.   
  Note, the given name must match a port name that is defined in the same task context.

    1. it adds a property the the task for setting the data period for the
       given port at runtime. The naming convention of the property is
       'port_name'_period. The default value for the property is set to the second
       argument align_port call.
    2. it adds a pure virtual function with the name
       'port_name'Callback to the task base class. This function is the replay callback
       used by the stream aligner and needs to be implemented by the user e.g. you.
    3. it generates code in the configure hook of the task base class that
       registers a data stream at the stream aligner for the given port.
    4. it generates code int the update hook of the task base class, that
       will poll all data from the given port, feed it into the stream aligner and call
       the step function.. 

Note that you MUST call TaskBase::configureHook() and TaskBase::updateHook() if you reimplement the hooks. 

Manual Usage
-----------

__Input data streams__
To register a data stream at the stream aligner one needs to specify the following 
arguments:

Period
: The period in which the data will arrive. Note, this value needs to be smaller or equal to the minimum time between two data samples, as the samples would get dropped otherwise.

Callback
: A callback function which should be called as soon, as a sample is allowed to be replayed.

Buffer size
: A upper limit to the amount of data samples that should be buffered for the given stream.

__Timeout__ The timeout specifies the global timeout. To say in other word, this determines, how long one stream may delay the replay of all other stream. 

__Step function__ In order to replay data, one needs to call the step function. The step function will check, weather 
there is data ready to be replayed. If data may be replayed, the step function calls the corresponding callback and returns true. Note that the step function will at most replay one sample per call.  

