---
title: General Concept
sort_info: 100
---

The general concept in the rock system management layer is to provide
requirements on what should run, and let the management layer (1) generate the
network that is needed to run it and (2) let it handle the runtime aspects
(configuration / reconfiguration, starting, monitoring)

It would be a __very__ good idea to follow [the
tutorials](../system_management_tutorials/index.html) before you continue with
this documentation.

Components
----------
In the frame of Rock's system management, a _component_ designates a black box
that has inputs and outputs, and can report about its execution. In practice, it
can be:

 * a _task context_, i.e. an actual component that is implemented in C++ using
   oroGen
 * a _composition_
 * a _data service_, which is an abstract placeholder for "concrete" components
   (compositions or task contexts). More on that later

The set of available component models in a system form the so-called system
model. In the system model:

 * task contexts models are automatically imported from oroGen descriptions.
   Because of the [naming convertion rules](index.html#naming_convertion), an
   the Roby model that represents the oroGen task context xsens_imu::Task is
   called XsensImu::Task.
 * compositions are defined using the following code block. This block defines a
   Compositions::CompositionModelName __class__ that represents the composition
   model, which can (and usually is) shortened into Cmp::CompositionModelName

{coderay:: ruby}
composition "CompositionModelName" do
  <definitions>
end
{coderay}

 * data services are defined using the following code block. This block defines
   a DataServices::ServiceModelName __module__ that represents the service
   model. It can (and usually is) shortened into Srv::ServiceModelName.

{coderay:: ruby}
data_service_type "ServiceModelName" do
  <definitions>
end
{coderay}

System model files vs. deployment files
---------------------------------------
The files that define system model elements (data services, compositions and
task contexts) are stored in models/blueprints/ and models/orogen/. The
deployment files, which define subsystems and what is required to run are stored
in config/deployments/.

