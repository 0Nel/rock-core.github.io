---
title: Compositions
sort_info: 300
---

In the system modelling, compositions are what bind components together: they
define, for a specific task, behaviour or subsystem (depending from which side
of robotics you come from), what components are needed and how these components
should be connected together to perform the required function.

In the above description -- as within the rest of this documentation --
"component" refers to a data service, task context or composition.

Compositions are defined with

{coderay:: ruby}
composition "ModelName" do
  ...
end
{coderay}

The main definition statements being 'add' and 'connect'

{coderay:: ruby}
composition "ModelName" do
  add Srv::Pose
end
{coderay}

The "add" line adds a child to the composition, i.e. declares that a component
of that type needs to run to perform the function of this composition. For
instance, the rock_rover_nav bundle defines the Cmp::Skid4Odometry composition
with:

{coderay:: ruby}
composition "Skid4Odometry" do
  add Srv::ActuatorControlledSystem, :as => 'motors'
  add Srv::Orientation, :as => 'imu'
  add Skid4Odometry::Task, :as => 'odometry'

  connect motors => odometry
  connect imu => odometry
end
{coderay}

In this example, the composition would require three components:

 * a component providing the Srv::ActuatorControlledSystem service, which gives
   motor data
 * a component providing the Srv::Orientation service, which gives the
   orientation in space of the system whose odometry we're computing
 * finally, the task context that is going to do the computation

The 'connect' statements above only refer to the children names (the values
given to :as). It means that connect, in this case, will create connections
between ports of the same type. motors => odometry will therefore create
connections between output ports of the Srv::ActuatorControlledSystem service
and input ports of the same type on the Skid4Odometry::Task class.

Composition Ports
-----------------
In order to be able to use compositions to provide e.g.  services, or in other
compositions, one has to give _ports_ to compositions.

Since compositions are only aggregations of other components, they don't have
ports on themselves. They "get" ports by exporting ports from their children
(one can export both input and output ports this way):

{coderay:: ruby}
composition "Skid4Odometry" do
  ...
  export odometry.odometry_delta_samples
  provides Srv::RelativePose
end
{coderay}

As you can see in the example above, the export of a port allows you to then use
the [provides statement](data_services.html#provides) to declare that the
composition provides a service and therefore be able to use it whenever said
service is needed.

Dependency specification: tasks and behaviours
----------------------------------------------
When one adds a child to a composition, he also declares that, at runtime, the
composition will need an instance of this child to run. Having a __working__
odometry in a system requires, for instance, a properly configured instance of
Skid4Odometry::Task to run. The default dependency setup therefore defines that
there is a dependency constraint failure if the child task stops while the
composition is running. In other words, [Roby's dependency
relation](http://rock-robotics.org/api//tools/roby/relations/dependency.html) is
used with:

{coderay:: ruby}
composition.depends_on(child, :failed => [:stop])
{coderay}

This can be changed at definition time by giving additional parameters to the
add statement. Such a special case is used to change the composition from a
behaviour (runs until not needed) to a goal-oriented task (runs until it
achieved a specified goal). A (hypothetical) Goto, which would use a
TrajectoryFollower::Task to reach a certain goal using a predefined trajectory
could be defined with:

{coderay:: ruby}
composition "Goto" do
  add TrajectoryFollower::Task, :success => [:reached_the_end]
end
{coderay}

where reached_the_end is one of the runtime states reported by the
TrajectoryFollower::Task component

Customizing compositions
------------------------
At the end of the day, much more can be done using Roby's runtime code execution
features. For instance, due to the limitations of the composition definition
implementation, one cannot currently use the complete range of event
constraints in the composition definition itself. This has to be done at runtime
[using either poll, an event handler or an event
command](http://rock-robotics.org/api//tools/roby/runtime_code.html)
