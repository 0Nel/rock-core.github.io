---
title: Bootstrapping and basic usage
sort_info: 25
---

Bootstrapping
-------------
"Bootstrapping" means getting autoproj itself before it can work its magic ...
The canonical way is the following:

 * install Ruby by yourself. On Debian or Ubuntu, this is done with
   done with

   sudo apt-get install wget ruby
   {: .cmdline}

 * then, [download this script](http://rock-robotics.org/autoproj_bootstrap) *in the directory where
   you want to create an autoproj installation*, and run it. This can be done with

   wget http://rock-robotics.org/autoproj\_bootstrap <br />
   ruby autoproj\_bootstrap
   {: .cmdline}

 * follow the instructions printed by the script<tt>manifest</tt>.

Additionally, if you are given a reference to a source code repository in which
an autoproj configuration is stored (i.e. a directory in which a manifest is
present), you can bootstrap this configuration directly:

   wget http://rock-robotics.org/autoproj\_bootstrap <br />
   ruby autoproj\_bootstrap VCS 
   {: .cmdline}

For instance, to build all packages made available by the Rock project,
do

   wget http://rock-robotics.org/autoproj\_bootstrap <br />
   ruby autoproj\_bootstrap git git://gitorious.org/rock/buildconf-all.git
   {: .cmdline}

Additional options can be given for the version control system. For instance,

   wget http://rock-robotics.org/autoproj\_bootstrap <br />
   ruby autoproj\_bootstrap git git://gitorious.org/rock/buildconf.git branch=test
   {: .cmdline}

Shell helpers {#shell_helpers}
-------------
On bash and zsh, autoproj installs some shell helpers that make using an
autoproj installation easier (for ROS users, they are the equivalent of the
rosshell scripts).

For now, only the "acd" command is available.

    acd drivers/orogen/xsens_imu

will go in the directory where the "drivers/orogen/xsens_imu" package source is.
Package names can be shortened as long as there are no ambiguity. You can only
keep the prefixes at each directory level. For instance:

     acd xsens_imu

will fail as it matches drivers/xsens_imu and drivers/orogen/xsens_imu. However,

     acd o/x

will work, as well as d/o/xsens (for instance).

Management
----------

**Building the installation and packages:**

To build all packages, simply do:

autoproj build
{: .commandline}

It will ask the value of newly defined configuration options, import code hosted
remotely that is not yet present, install OS packages (e.g. Ubuntu packages on
an Ubuntu installation) and build everything.

If you want to build only a specific package you can use, here it for building 'orocos/rtt':

autoproj build orocos/rtt
{: .commandline}


Alternatively to autoproj build, you can use the 'short' command version:

amake 
{: .commandline}

It runs autoproj build for the given directory or package name.
Selects the current directory if none is given



**Updating and maintaining your installation:**

In order to update your 

autoproj update
{: .commandline}

Alternatively, you can use the 'short' command version:

aup 
{: .commandline}

It runs autoproj update for the given directory or package name.


Finally, if you want to make sure that your build is fresh, then do

autoproj rebuild
{: .commandline}

A less intrusive version of it only forces all tools to reconsider building. It
is mainly useful for CMake when the build environment changed -- CMake caches a
lot of values. To trigger this, do

autoproj force-build
{: .commandline}

**Exception**: to avoid long builds, the rebuild and force-build commands apply only
to the packages given on the command line. E.g., autoproj rebuild orocos/rtt
will only rebuild the orocos/rtt packages. If you want to rebuild both the
packages and its dependencies, use the --with-depends options.
{: .warning}

To add a new set, one edits the <tt>autoproj/manifest</tt> file and adds it
there. Then, simply starting the build will update everything and rebuild what
is needed.


**Changing your configuration:**

After having boostrapped your Rock installation, autoproj will *not* ask you again about the configuration, since 
the questions you already answered. So if you want to change your configuration, i.e. you answers do:

autoproj build --reconfigure
{: .commandline}

Alternatively, you can edit the autoproj/config.yml file directly.

By default, autoproj does not automatically update the package sources. To do
that, you have to explicitly update your packages as described in the following section. 


**Generating documentation:**

Documentation is generated only when asked explicitly:

autoproj doc
{: .commandline}

It generates documentation of packages that have some, and copies that
documentation into build/doc/, following the same layout than the source
directory.

All these commands (i.e. build, doc, and update) accept a package name as
argument, thus triggering build only for this package and its dependencies. For
instance:


Switching configuration after bootstrapping
-------------------------------------------
Let's assume that you want to switch what configuration autoproj is tracking,
but without having to redo a complete bootstrap -- i.e. avoiding to rebuild
stuff that is common between the configurations.

autoproj provides the switch-config command for that. This command takes the
same arguments than the bootstrap script, that is:

autoproj switch-config \[vcs_type] \[vcs_url] \[vcs_options]
{: .cmdline}

As a shortcut, one can omit vcs_type and vcs_url if they don't change.
This is especially useful when switching between branches:

autoproj switch-config branch=experimental
{: .cmdline}


