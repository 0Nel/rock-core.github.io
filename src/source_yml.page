---
title: Writing the source.yml
sort_info: 100
---
The source.yml file gives generic information on the source itself (most
importantly its name), and version control information (i.e. where to get the
packages). It is a YAML file, and looks like:

{coderay:: yaml}
name: dfki.orocos
constants:
  ROOT_DIR: $HOME/share
  
version_control:
  "modules/.*":
    type: git
    url: $ROOT_DIR/$PACKAGE.git
  "drivers/.*":
    type: svn
    url: svn+ssh://rlbsvn.informatik.uni-bremen.de/trunk/$PACKAGE.git
{coderay}

The name field gives a name for the source. It is arbitrary, but the guideline
is to give a name that is java-like for namespaces, i.e. origin.name.

The <tt>constants:</tt> section lists values that can be reused for different
packages. Rubotics defines the HOME constant which is the user's home directory,
and the PACKAGE constant that is the actual package name. We will see later that
these values can also be configuration variables that are asked to the user.

Finally, the <tt>version_control:</tt> section lists the sources for the
modules. Its general format is:
{coderay:: yaml}
package_name:
  type: version_control_type # git, svn, cvs, darcs
  url: repository_url
{coderay}

Where package\_name is a regular expression that matches the package name, i.e.
use ".\*" to match all packages for instance.

For the git importer, one of 'branch' or 'tag' options can be provided as well:
{coderay:: yaml}
package_name:
  branch: branch_to_track
  tag: tag_to_stick_to # it is branch OR tag
{coderay}

The options are applied in order, meaning that the toplevel options override the
lower level ones. In general, one will have a ".\*" entry to give options for all
packages, and then override for specific packages:

{coderay:: yaml}
version_control:
  "modules/logger": # we don't follow master on this module
    branch: imoby

  .*: # common options for all packages
    type: git
    url: $ROOT_DIR/$PACKAGE.git
{coderay}

Interaction between source definition files
-------------------------------------------
When multiple sources are defined, it is possible to override the source of
low-priority source with a higher priority one. Rubotics has the following rules
when searching for version control information:

 * rubotics looks at the source definition files *in the order they appear in
   the installation manifest*
 * rubotics searches a relevant version\_control field, and stops at the first
   source.yml that has one.
 * rubotics *stops searching* at the source that defines the package.
   Consequence: this source *must* have a version\_control field for it, and an
   error will be issued otherwise.

Using configuration options
---------------------------
rubotics offers a configuration system that allows the user to tweak the build
to its needs. It is possible to use this system in the source.yml file. To do
that, create an init.rb file next to the source.yml file, and add the following
line:

{coderay:: ruby}
configuration_option "option_name", "option_type",
    :default => "default_value",
    :values => ["set", "of", "possible", "values"],
    :doc => "description of the option"
{coderay}

where the option\_type field can either be "string" or "boolean".

Then, you can use the option\_name as an expansion in the source.yml file. For
instance:

{coderay:: yaml}
constants:
  ROOT_DIR: $option_name/$PACKAGE.git
{coderay}

